Opal.modules["application/data_for_test"] = function(Opal) {/* Generated by Opal 1.7.1 */
  var $hash2 = Opal.hash2, $def = Opal.def, self = Opal.top, nil = Opal.nil;

  return $def(self, '$project_list', function $$project_list() {
    
    return $hash2(["i1", "i2", "i3", "i4"], {"i1": $hash2(["name", "data", "action"], {"name": "the song", "data": "item1", "action": "load_project"}), "i2": $hash2(["name", "data", "action"], {"name": "mon projet2", "data": "item2", "action": "load_project"}), "i3": $hash2(["name", "data", "action"], {"name": "autre projet", "data": "item3", "action": "load_project"}), "i4": $hash2(["name", "data", "action"], {"name": "my great song", "data": "item4", "action": "load_project"})})
  })
};

Opal.modules["application/atome_experimental"] = function(Opal) {/* Generated by Opal 1.7.1 */
  var $slice = Opal.slice, $def = Opal.def, self = Opal.top, nil = Opal.nil;

  return $def(self, '$svg_fetch', function $$svg_fetch(svg_name, $a, $b, $c, $d) {
    var $post_args, width, height, svg_color, target;

    
    $post_args = $slice(arguments, 1);
    
    if ($post_args.length > 1) width = $post_args.shift();if (width == null) width = 33;
    
    if ($post_args.length > 1) height = $post_args.shift();if (height == null) height = 33;
    
    if ($post_args.length > 1) svg_color = $post_args.shift();if (svg_color == null) svg_color = "lightgray";
    
    target = $post_args.shift();if (target == null) target = nil;
    
 fetch("./medias/images/icons/" +svg_name +".svg")
    .then(response => response.text())
   .then(svgText => {
        let svgContainer = document.getElementById(target);
        let parser = new DOMParser();
        let svgDoc = parser.parseFromString(svgText, "image/svg+xml");
        let importedSVG = svgDoc.getElementsByTagName("svg")[0];
        importedSVG.style.width = width + "px";
        importedSVG.style.height = height + "px";
        let elements = importedSVG.getElementsByTagName("path");
        Array.from(elements).forEach(el => {
            el.setAttribute("fill", svg_color);
            el.setAttribute("stroke", svg_color);
        });
        svgContainer.appendChild(importedSVG);
    });

;
  }, -3)
};

Opal.modules["application/version"] = function(Opal) {/* Generated by Opal 1.7.1 */
  var self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('puts');
  
  self.$puts("vie version: 0.002");
  return self.$puts("v-UIe version: 0.001");
};

Opal.modules["application/styles"] = function(Opal) {/* Generated by Opal 1.7.1 */
  var $hash2 = Opal.hash2, $rb_divide = Opal.rb_divide, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $rb_minus = Opal.rb_minus, $def = Opal.def, self = Opal.top, nil = Opal.nil;

  Opal.add_stubs('/,+,*,-,color,[],vie_styles,shadow,attached,grab');
  
  
  $def(self, '$vie_styles', function $$vie_styles() {
    var action_height = nil, toolbox_with = nil, inspector_with = nil, navigation_height = nil, margin = nil, smooth = nil;

    
    action_height = 39;
    toolbox_with = 52;
    inspector_with = 120;
    navigation_height = 30;
    margin = 9;
    smooth = 3;
    return $hash2(["margin", "toolbox_with", "inspector_with", "navigation_height", "text_color", "list_style", "back_color", "title", "toolbox_color", "center_color", "action_color", "inspector_color", "active_color", "inactive_color", "dark_color", "darker_color", "cell_color", "cell_connected", "cell_shadow", "toolbox_style", "inspector_style", "action_style", "filer", "support_style", "center_style"], {"margin": margin, "toolbox_with": 60, "inspector_with": inspector_with, "navigation_height": 30, "text_color": $hash2(["red", "green", "blue", "id"], {"red": 0.6, "green": 0.6, "blue": 0.6, "id": "text_color"}), "list_style": $hash2(["visual", "width", "left", "attached"], {"visual": $hash2(["size"], {"size": 15}), "width": 99, "left": 9, "attached": ["inactive_color"]}), "back_color": $hash2(["red", "green", "blue", "id"], {"red": 0.1, "green": 0.1, "blue": 0.1, "id": "back_color"}), "title": $hash2(["id", "visual", "width", "left", "center", "top", "attached"], {"id": "title", "visual": $hash2(["size"], {"size": 21}), "width": "auto", "left": 25, "center": "horizontal", "top": 9, "attached": ["inactive_color"]}), "toolbox_color": $hash2(["red", "green", "blue", "id"], {"red": 0.15, "green": 0.15, "blue": 0.15, "id": "toolbox_color"}), "center_color": $hash2(["red", "green", "blue", "alpha", "id"], {"red": 0, "green": 0, "blue": 0, "alpha": 0, "id": "center_color"}), "action_color": $hash2(["red", "green", "blue", "alpha", "id"], {"red": 0, "green": 0, "blue": 0, "alpha": 0, "id": "action_color"}), "inspector_color": $hash2(["red", "green", "blue", "id"], {"red": 0.15, "green": 0.15, "blue": 0.15, "id": "inspector_color"}), "active_color": $hash2(["red", "green", "blue", "id"], {"red": 0.8, "green": 0.36, "blue": 0.07, "id": "active_color"}), "inactive_color": $hash2(["red", "green", "blue", "id"], {"red": 0.3, "green": 0.3, "blue": 0.3, "id": "inactive_color"}), "dark_color": $hash2(["red", "green", "blue", "id"], {"red": 0.127, "green": 0.127, "blue": 0.127, "id": "dark_color"}), "darker_color": $hash2(["red", "green", "blue", "id"], {"red": 0.127, "green": 0.127, "blue": 0.127, "id": "darker_color"}), "cell_color": $hash2(["red", "green", "blue", "id"], {"red": 0.127, "green": 0.127, "blue": 0.127, "id": "cell_color"}), "cell_connected": $hash2(["red", "green", "blue", "id"], {"red": $rb_divide(154, 255), "green": $rb_divide(205, 255), "blue": $rb_divide(50, 255), "id": "cell_connected"}), "cell_shadow": $hash2(["blur", "left", "top", "id", "red", "green", "blue", "alpha"], {"blur": 9, "left": 3, "top": 3, "id": "cell_shadow", "red": 0, "green": 0, "blue": 0, "alpha": 0.6}), "toolbox_style": $hash2(["id", "overflow", "left", "top", "smooth", "width", "bottom", "height", "attached"], {"id": "toolbox", "overflow": "hidden", "left": margin, "top": $rb_plus(action_height, margin), "smooth": smooth, "width": toolbox_with, "bottom": 30, "height": 420, "attached": ["toolbox_color"]}), "inspector_style": $hash2(["id", "left", "top", "smooth", "width", "bottom", "height", "overflow", "attached"], {"id": "inspector", "left": $rb_plus(toolbox_with, $rb_times(margin, 2)), "top": $rb_plus(action_height, margin), "smooth": smooth, "width": inspector_with, "bottom": 0, "height": 420, "overflow": "auto", "attached": ["inspector_color"]}), "action_style": $hash2(["id", "left", "top", "width", "right", "height", "attached"], {"id": "action", "left": toolbox_with, "top": 0, "width": "auto", "right": 0, "height": action_height, "attached": ["action_color"]}), "filer": $hash2(["id", "top", "bottom", "left", "width", "overflow", "height", "attached", "smooth"], {"id": "filer", "top": 12, "bottom": 36, "left": 6, "width": $rb_minus(inspector_with, 12), "overflow": "auto", "height": "auto", "attached": ["darker_color"], "smooth": 6}), "support_style": $hash2(["left", "width", "height", "attached"], {"left": 6, "width": 33, "height": 33, "attached": ["toolbox_color"]}), "center_style": $hash2(["id", "left", "bottom", "top", "right", "width", "height", "attached"], {"id": "center", "left": $rb_plus($rb_plus(toolbox_with, inspector_with), $rb_times(margin, 3)), "bottom": navigation_height, "top": action_height, "right": 0, "width": "auto", "height": "auto", "attached": ["center_color"]})});
  });
  self.$color(self.$vie_styles()['$[]']("back_color"));
  self.$color(self.$vie_styles()['$[]']("toolbox_color"));
  self.$color(self.$vie_styles()['$[]']("action_color"));
  self.$color(self.$vie_styles()['$[]']("inspector_color"));
  self.$color(self.$vie_styles()['$[]']("center_color"));
  self.$color(self.$vie_styles()['$[]']("darker_color"));
  self.$color(self.$vie_styles()['$[]']("dark_color"));
  self.$color(self.$vie_styles()['$[]']("text_color"));
  self.$color(self.$vie_styles()['$[]']("active_color"));
  self.$color(self.$vie_styles()['$[]']("inactive_color"));
  self.$color(self.$vie_styles()['$[]']("cell_connected"));
  self.$shadow(self.$vie_styles()['$[]']("cell_shadow"));
  return self.$grab("view").$attached("back_color");
};

Opal.queue(function(Opal) {/* Generated by Opal 1.7.1 */
  var $hash2 = Opal.hash2, $truthy = Opal.truthy, $rb_gt = Opal.rb_gt, $def = Opal.def, $send = Opal.send, $gvars = Opal.gvars, $eqeq = Opal.eqeq, $rb_plus = Opal.rb_plus, $rb_times = Opal.rb_times, $to_ary = Opal.to_ary, self = Opal.top, nil = Opal.nil, default_project_name = nil;

  Opal.add_stubs('require,element,box,[],vie_styles,image,grab,text,merge,>,to_px,width,height,resize,right,matrix,detached,on,resize_matrix,each_with_index,value,children,touch,cell,puts,data,[]=,include?,id,each,attached,<<,==,clear_zone,vivify,wait,create_matrix,set_title,+,*,svg_fetch,send,fill_toolzone,delete,children=,top,remove_active,list,project_list,alert');
  
  self.$require("application/data_for_test");
  self.$require("application/atome_experimental");
  self.$require("application/version");
  self.$require("application/styles");
  default_project_name = "untiltled";
  self.$element($hash2(["id", "data"], {"id": "connection", "data": [1, 3]}));
  self.$element($hash2(["id", "data"], {"id": "current_matrix", "data": ["0_0_0"]}));
  self.$element($hash2(["id", "data"], {"id": "selected", "data": []}));
  self.$element($hash2(["id", "data"], {"id": "context", "data": "default"}));
  self.$element($hash2(["id", "data"], {"id": "current_project", "data": default_project_name}));
  self.$element($hash2(["id", "data"], {"id": "links", "data": $hash2([], {})}));
  self.$box(self.$vie_styles()['$[]']("center_style"));
  self.$box(self.$vie_styles()['$[]']("action_style"));
  self.$box(self.$vie_styles()['$[]']("toolbox_style"));
  self.$box(self.$vie_styles()['$[]']("inspector_style"));
  self.$grab("action").$image($hash2(["path", "left", "right", "top", "size"], {"path": "./medias/images/logos/vie.svg", "left": "auto", "right": 3, "top": -6, "size": 60}));
  self.$grab("action").$text(self.$vie_styles()['$[]']("title").$merge($hash2(["data"], {"data": default_project_name})));
  
  $def(self, '$resize_matrix', function $$resize_matrix(matrix, center) {
    
    
    if ($truthy($rb_gt(center.$width().$to_px(), center.$height().$to_px()))) {
      matrix.$resize(center.$height().$to_px(), center.$height().$to_px())
    } else {
      matrix.$resize(center.$width().$to_px(), center.$width().$to_px())
    };
    matrix.$width("auto");
    return matrix.$right(0);
  });
  
  $def(self, '$create_matrix', function $$create_matrix(id) {
    var self = this, center = nil, modules = nil, inspector = nil;
    if ($gvars.window == null) $gvars.window = nil;

    
    center = self.$grab("center");
    modules = center.$matrix($hash2(["id", "top", "left", "smooth", "columns", "rows", "color", "cells"], {"id": "vm_" + (id), "top": 0, "left": 0, "smooth": 0, "columns": $hash2(["count"], {"count": 8}), "rows": $hash2(["count"], {"count": 8}), "color": $hash2(["alpha"], {"alpha": 0}), "cells": $hash2(["particles"], {"particles": $hash2(["margin", "smooth", "color", "shadow"], {"margin": 9, "smooth": 3, "color": self.$vie_styles()['$[]']("cell_color"), "shadow": self.$vie_styles()['$[]']("cell_shadow")})})}));
    center.$detached("cell_color");
    center.$detached("cell_shadow");
    modules.$width("auto");
    modules.$right(0);
    $send($gvars.window, 'on', ["resize"], function $$1(){var self = $$1.$$s == null ? this : $$1.$$s;

      return self.$resize_matrix(modules, center)}, {$$s: self});
    self.$resize_matrix(modules, center);
    inspector = self.$grab("inspector");
    return $send(modules.$children().$value(), 'each_with_index', [], function $$2(_module_found, index){var self = $$2.$$s == null ? this : $$2.$$s;

      
      if (_module_found == null) _module_found = nil;
      if (index == null) index = nil;
      $send(modules.$cell(index), 'touch', ["down"], function $$3(){var $a, self = $$3.$$s == null ? this : $$3.$$s;

        
        self.$puts("down context is: " + (self.$grab("context").$data().$value()));
        return ($a = [0, index], $send(self.$grab("connection").$data(), '[]=', $a), $a[$a.length - 1]);}, {$$s: self});
      $send(modules.$cell(index), 'touch', ["long"], function $$4(){var self = $$4.$$s == null ? this : $$4.$$s;

        
        self.$puts("up context is: " + (self.$grab("context").$data().$value()));
        if ($truthy(self.$grab("selected").$data().$value()['$include?'](self.$id().$value()))) {
          
          $send(self.$grab("selected").$data().$value(), 'each', [], function $$5(cell_id){var self = $$5.$$s == null ? this : $$5.$$s, selected_cell = nil;

            
            if (cell_id == null) cell_id = nil;
            selected_cell = self.$grab(cell_id);
            selected_cell.$attached(["cell_color"]);
            return selected_cell.$detached("active_color");}, {$$s: self});
          return self.$grab("selected").$data([]);
        } else {
          
          self.$grab("selected").$data().$value()['$<<'](self.$id().$value());
          self.$attached(["active_color"]);
          return self.$detached("cell_color");
        };}, {$$s: self});
      return $send(modules.$cell(index), 'touch', ["up"], function $$6(){var self = $$6.$$s == null ? this : $$6.$$s, source_cell = nil, target_cell = nil, new_connection = nil;

        
        self.$puts("up context is: " + (self.$grab("context")) + ".data.value");
        self.$grab("connection").$data()['$[]='](1, index);
        source_cell = self.$grab("connection").$data().$value()['$[]'](0);
        target_cell = self.$grab("connection").$data().$value()['$[]'](1);
        if ($eqeq(source_cell, target_cell)) {
          return nil
        } else {
          
          self.$clear_zone(inspector);
          new_connection = self.$grab("connection").$data().$value();
          self.$vivify($hash2(["connect"], {"connect": "TODO :add matrix _id  " + (new_connection)}));
          inspector.$text($hash2(["data"], {"data": new_connection}));
          modules.$cell(source_cell).$detached("cell_color");
          modules.$cell(target_cell).$detached("cell_color");
          modules.$cell(source_cell).$attached("cell_connected");
          modules.$cell(target_cell).$attached("cell_connected");
          return $send(self, 'wait', [0.6], function $$7(){
            
            modules.$cell(source_cell).$attached("cell_color");
            modules.$cell(target_cell).$attached("cell_color");
            modules.$cell(source_cell).$detached("cell_connected");
            return modules.$cell(target_cell).$detached("cell_connected");});
        };}, {$$s: self});}, {$$s: self});
  });
  self.$create_matrix("0_0_0");
  
  $def(self, '$set_title', function $$set_title() {
    var self = this, project_name = nil;

    
    project_name = self.$grab("current_project").$data();
    return self.$grab("title").$data(project_name);
  });
  
  $def(self, '$vivify', function $$vivify(params) {
    var self = this;

    return self.$puts("send to back ==> " + (params))
  });
  
  $def(self, '$load_project', function $$load_project(data) {
    var self = this, project_id = nil, new_project_name = nil;

    
    project_id = data['$[]']("id");
    self.$vivify(project_id);
    new_project_name = data['$[]']("name");
    self.$grab("current_project").$data(new_project_name);
    return self.$set_title();
  });
  
  $def(self, '$fill_toolzone', function $$fill_toolzone(ids) {
    var self = this, svg_color = nil, margin = nil, support_style = nil, icon_spacing = nil;

    
    svg_color = "gray";
    margin = self.$vie_styles()['$[]']("margin");
    support_style = self.$vie_styles()['$[]']("support_style");
    icon_spacing = $rb_plus(self.$vie_styles()['$[]']("support_style")['$[]']("height"), $rb_times(margin, 2));
    return $send(ids, 'each_with_index', [], function $$8(id_found, index){var self = $$8.$$s == null ? this : $$8.$$s, support = nil;

      
      if (id_found == null) id_found = nil;
      if (index == null) index = nil;
      support = self.$grab("toolbox").$box(support_style.$merge($hash2(["top", "id"], {"top": $rb_plus($rb_times(icon_spacing, index), margin), "id": "tool_support_" + (index)})));
      self.$svg_fetch(id_found, 33, 33, svg_color, support.$id());
      return $send(support, 'touch', [true], function $$9(){var self = $$9.$$s == null ? this : $$9.$$s;

        return self.$send(id_found)}, {$$s: self});}, {$$s: self});
  });
  self.$fill_toolzone(["folder", "settings", "edition", "select", "group", "copy", "paste", "undo"]);
  
  $def(self, '$clear_zone', function $$clear_zone(zone) {
    var $a, self = this;

    
    $send(zone.$children(), 'each', [], function $$10(child_found){var self = $$10.$$s == null ? this : $$10.$$s;

      
      if (child_found == null) child_found = nil;
      return self.$grab(child_found).$delete(true);}, {$$s: self});
    return ($a = [[]], $send(zone, 'children=', $a), $a[$a.length - 1]);
  });
  
  $def(self, '$remove_active', function $$remove_active(items) {
    var self = this;

    return $send(items, 'each', [], function $$11(id_found, _properties){var self = $$11.$$s == null ? this : $$11.$$s;

      
      if (id_found == null) id_found = nil;
      if (_properties == null) _properties = nil;
      if ($truthy(self.$grab(id_found))) {
        self.$grab(id_found).$detached("active_color")
      };
      if ($truthy(self.$grab(id_found))) {
        return self.$grab(id_found).$attached("inactive_color")
      } else {
        return nil
      };}, {$$s: self})
  });
  
  $def(self, '$list', function $$list(parent, style, items) {
    var self = this, margin = nil;

    
    margin = self.$vie_styles()['$[]']("margin");
    return $send(items, 'each_with_index', [], function $$12($mlhs_tmp1, index){var $a, $b, self = $$12.$$s == null ? this : $$12.$$s, id_found = nil, properties = nil, label = nil, item = nil;

      
      if ($mlhs_tmp1 == null) $mlhs_tmp1 = nil;
      if (index == null) index = nil;
      $b = $mlhs_tmp1, $a = $to_ary($b), (id_found = ($a[0] == null ? nil : $a[0])), (properties = ($a[1] == null ? nil : $a[1])), $b;
      label = properties['$[]']("name");
      item = parent.$text($hash2(["data", "id"], {"data": label, "id": id_found}).$merge(style));
      item.$top($rb_plus($rb_times(25, index), margin));
      return $send(item, 'touch', [true], function $$13(){var self = $$13.$$s == null ? this : $$13.$$s;

        
        self.$remove_active(items);
        self.$detached("inactive_color");
        item.$attached(["active_color"]);
        return self.$send(properties['$[]']("action"), properties.$merge($hash2(["id"], {"id": id_found})));}, {$$s: self});}, {$$s: self, $$has_top_level_mlhs_arg: true});
  });
  
  $def(self, '$folder', function $$folder() {
    var self = this, inspector = nil, text_list_style = nil;

    
    inspector = self.$grab("inspector");
    self.$clear_zone(inspector);
    text_list_style = self.$vie_styles()['$[]']("list_style").$merge($hash2(["classes"], {"classes": "project_list"}));
    return self.$list(inspector, text_list_style, self.$project_list());
  });
  
  $def(self, '$rename_project', function $$rename_project() {
    var self = this;

    return self.$alert("rename : " + (self.$grab("current_project").$data()))
  });
  
  $def(self, '$delete_project', function $$delete_project() {
    var self = this;

    return self.$alert("delete : " + (self.$grab("current_project").$data()))
  });
  
  $def(self, '$duplicate_project', function $$duplicate_project() {
    var self = this;

    return self.$alert("duplicate : " + (self.$grab("current_project").$data()))
  });
  
  $def(self, '$settings', function $$settings() {
    var self = this, inspector = nil, text_list_style = nil, project_name = nil;

    
    inspector = self.$grab("inspector");
    self.$clear_zone(inspector);
    text_list_style = self.$vie_styles()['$[]']("list_style").$merge($hash2(["classes"], {"classes": "settings_list"}));
    project_name = self.$grab("current_project").$data().$value();
    return self.$list(inspector, text_list_style, $hash2(["rename", "delete", "duplicate"], {"rename": $hash2(["name", "data", "action"], {"name": "rename : " + (project_name), "data": "item1", "action": "rename_project"}), "delete": $hash2(["name", "data", "action"], {"name": "delete", "data": "item2", "action": "delete_project"}), "duplicate": $hash2(["name", "data", "action"], {"name": "duplicate", "data": "item3", "action": "duplicate_project"})}));
  });
  
  $def(self, '$edition', function $$edition() {
    var self = this, inspector = nil;

    
    inspector = self.$grab("inspector");
    return self.$clear_zone(inspector);
  });
  
  $def(self, '$select', function $$select() {
    var self = this, inspector = nil;

    
    inspector = self.$grab("inspector");
    return self.$clear_zone(inspector);
  });
  
  $def(self, '$group', function $$group() {
    var self = this, inspector = nil;

    
    inspector = self.$grab("inspector");
    return self.$clear_zone(inspector);
  });
  
  $def(self, '$copy', function $$copy() {
    var self = this, inspector = nil;

    
    inspector = self.$grab("inspector");
    return self.$clear_zone(inspector);
  });
  
  $def(self, '$paste', function $$paste() {
    var self = this, inspector = nil;

    
    inspector = self.$grab("inspector");
    return self.$clear_zone(inspector);
  });
  return $def(self, '$undo', function $$undo() {
    var self = this, inspector = nil;

    
    inspector = self.$grab("inspector");
    return self.$clear_zone(inspector);
  });
});
